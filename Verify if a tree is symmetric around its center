Verify if a tree is symmetric around its center i.e: left subtree = right subtree at every
node.

*****************************************************************SOLUTION**********************************************************************

#include<stdio.h>
#include<conio.h>
#include<stdlib.h>


struct Node
{
    int data;
    Node* left, * right;
};

int left_array[10];
int index_left=0;
int right_array[10];
int index_right=0;

void compare()
{
	if(index_left==index_right)
	{
		int flag=0;
		for(int i=0;i<index_left;i++)
		{
			if(left_array[i]!=right_array[i])
			{
					flag=1;
				break;
			}
			
		}
		if(flag==0)
			printf("\n symmetric");
		else
			printf("\n not symmetric");	
	}
	else
		printf("\n Not symmetric");
		
}
void print_leftsubtree()
{
	for(int i=0;i<index_left;i++)
		printf(" %d",left_array[i]);
}

void print_rightsubtree()
{
    for(int i=0;i<index_right;i++)
		printf(" %d",right_array[i]);
}

int Inorder_left(struct Node *root,int *left_array,int index1)
{
    
    if(root)
    {
        index1=Inorder_left(root->left,left_array,index1);
        left_array[index1++]=root->data;
        index1=Inorder_left(root->right,left_array,index1);
    }
    
    return index1;
} 
int Inorder_right(struct Node *root,int *right_array,int index1)
{
    
    if(root)
    {
        index1=Inorder_right(root->left,right_array,index1);
        right_array[index1++]=root->data;
        index1=Inorder_right(root->right,right_array,index1);
    }
    
    return index1;
}

Node* newNode(int data)
{
    Node* node = (Node*)malloc(sizeof(Node));
    node->data = data;
    node->left = node->right = NULL;
    return (node);
}
 

Node* insertLevelOrder(int arr[], Node* root,int i, int n)
{
    
    if (i < n)
    {
        Node* temp = newNode(arr[i]);
        root = temp;
 
        // insert left child
        root->left = insertLevelOrder(arr,
                   root->left, 2 * i + 1, n);
 
        // insert right child
        root->right = insertLevelOrder(arr,
                  root->right, 2 * i + 2, n);
    }
    return root;
}

void inOrder(Node* root)
{
    if (root != NULL)
    {
        inOrder(root->left);
        printf("%d ",root->data);
        inOrder(root->right);
    }
}

int main()
{
    int arr[] = { 1, 2, 2, 1, 1, 1, 1};
    int n = sizeof(arr)/sizeof(arr[0]);
    Node* root = insertLevelOrder(arr, root, 0, n);
    //inOrder(root);
    
    printf("\n\n\t Inorder of left subtree....\n");
    
    index_left=Inorder_left(root->left, left_array, index_left);
    print_leftsubtree();
    
    printf("\n\n\t Inorder of right subtree....\n");
    
    index_right=Inorder_right(root->right, right_array, index_right);
    print_rightsubtree();
    
    compare();
}
